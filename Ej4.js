// ‚ô°‚ô°‚ô°‚ô° EJERCICIO 4: Sistema de Gesti√≥n de Citas M√©dicas ‚ô°‚ô°‚ô°‚ô°

const citas = []; // Array para guardar las citas m√©dicas programadas

// Funci√≥n flecha para programar una nueva cita
const programarCita = () => {
  const nombre = prompt("Ingrese el nombre del paciente:");
  const fecha = prompt("Ingrese la fecha de la cita (formato: YYYY-MM-DD):");
  const hora = prompt("Ingrese la hora de la cita (formato: HH:MM):");
  const medico = prompt("Ingrese el nombre del m√©dico:");

  // Validaci√≥n de la fecha
  const partesFecha = fecha.split("-");
  const a√±o = parseInt(partesFecha[0]);
  const mes = parseInt(partesFecha[1]);
  const dia = parseInt(partesFecha[2]);

  // Validaci√≥n de la hora
  const partesHora = hora.split(":");
  const horas = parseInt(partesHora[0]);
  const minutos = parseInt(partesHora[1]);

  // Validaci√≥n con isNaN y rangos v√°lidos
  if (
    !nombre ||
    !fecha ||
    !hora ||
    !medico ||
    partesFecha.length !== 3 ||
    partesHora.length !== 2 ||
    isNaN(a√±o) || isNaN(mes) || isNaN(dia) ||
    isNaN(horas) || isNaN(minutos) ||
    a√±o < 2025 || a√±o > 2025 ||
    mes < 1 || mes > 12 ||
    dia < 1 || dia > 31 ||
    horas < 0 || horas > 23 ||
    minutos < 0 || minutos > 59
  ) {
    alert("‚ùå Datos inv√°lidos. Aseg√∫rate de escribir la fecha y hora correctamente.");
    return;
  }

  // Agregamos la cita al array usando push()
  citas.push({
    nombre: nombre,
    fecha: fecha,
    hora: hora,
    medico: medico,
  });

  alert("‚úÖ Cita programada con √©xito.");
};

// Funci√≥n flecha para ver las citas programadas
const verCitas = () => {
  if (citas.length === 0) {
    alert("üì≠ No hay citas programadas.");
    return;
  }

  // Ordenamos las citas por fecha y hora
  const citasOrdenadas = [...citas].sort((a, b) => {
    const fechaA = a.fecha + " " + a.hora;
    const fechaB = b.fecha + " " + b.hora;
    return fechaA.localeCompare(fechaB); // Compara las fechas como strings
  });

  // Mostramos las citas con forEach()
  let mensaje = "üìÖ Citas programadas:\n\n";
  citasOrdenadas.forEach((cita, i) => {
    mensaje += `${i + 1}. ${cita.nombre} - ${cita.fecha} a las ${cita.hora} con Dr. ${cita.medico}\n`;
  });

  alert(mensaje);
};

// Funci√≥n flecha para cancelar una cita
const cancelarCita = () => {
  const nombre = prompt("Ingrese el nombre del paciente cuya cita desea cancelar:");

  // Buscamos el √≠ndice con findIndex()
  const index = citas.findIndex(cita => cita.nombre.toLowerCase() === nombre.toLowerCase());

  if (index !== -1) {
    citas.splice(index, 1); // Eliminamos la cita con splice()
    alert("üóëÔ∏è Cita cancelada exitosamente.");
  } else {
    alert("‚ùå No se encontr√≥ una cita con ese nombre.");
  }
};

// Funci√≥n flecha para el men√∫ principal con do...while
const menu = () => {
  let opcion;

  do {
    opcion = prompt(
      "ü©∫ SISTEMA DE CITAS M√âDICAS\n1. Programar cita\n2. Ver citas\n3. Cancelar cita\n4. Salir"
    );

    switch (opcion) {
      case "1":
        programarCita();
        break;
      case "2":
        verCitas();
        break;
      case "3":
        cancelarCita();
        break;
      case "4":
        alert("üëã Gracias por usar el sistema.");
        break;
      default:
        alert("‚ùå Opci√≥n inv√°lida. Intenta nuevamente.");
    }
  } while (opcion !== "4");
};

// Ejecutamos el men√∫
menu();





